

# you would ned to select all arm children too for this wt work
# def getOBBCenter(self, ob):
  # Compute center of geometry for all objects so we can look at that point
  # min = Vector([999,999,999])
  # max = Vector([-999,-999,-999])
  # for ob in context.visible_objects:
  #   if ob.type == 'MESH':
  #     # idk i just work here
  #     # https://blender.stackexchange.com/questions/129473/typeerror-element-wise-multiplication-not-supported-between-matrix-and-vect
  #     # Blender has since adjusted its mathutils module, replacing the asterisk * with the at symbol @
  #     #https://peps.python.org/pep-0465/

  #     bbox_corners = [ob.matrix_world @ Vector(corner) for corner in ob.bound_box]
  #     for bbc in bbox_corners:
  #       if bbc.x > max.x: max.x = bbc.x
  #       if bbc.y > max.y: max.y = bbc.y
  #       if bbc.z > max.z: max.z = bbc.z
  #       if bbc.x < min.x: min.x = bbc.x
  #       if bbc.y < min.y: min.y = bbc.y
  #       if bbc.z < min.z: min.z = bbc.z
  # avg = min + (max - min) * 0.5

  # initial position camera
  # Utils.M_2PI / float(self._rotation_slices)
  #  Matrix.Rotation(self._initial_azumith, 4, 'Z')
  # Matrix.Rotation(self._initial_zenith, 4, 'Z')
  # m = Matrix.Identity(4)
  # m[0].xyzw = 1, 0, 0, 0
  # m[1].xyzw = 0, 1, 0, 0
  # m[2].xyzw = 0, 0, 1, 0
  # m[3].xyzw = 0, 0, 0, 1
  # (sinθcosϕ,sinθsinϕ,cosθ)

  # what is this for?
  # bpy.ops.object.visual_transform_apply()
  # for c in self._dummyCamera.constraints:
  #  self._dummyCamera.constraints.remove(c)
  # self._dummyCamera.data.ortho_scale = self._fDist

  # _oldObjMat = None
  # _rotMat = Matrix.Identity(4)
  # _azumith_slice = 0
  # _zenith_slice = 0
  # def updateCamera(self, cam):
  #   pmat = Matrix.Translation((0, 0, self._initial_radius))
  #   cam.matrix_world = pmat
  #   if self._azumith_slices > 0 or self._zenith_slices>0:
  #     rot_mat = Matrix.Identity(4)
  #     if self._azumith_slices > 0:
  #       slice = Utils.M_2PI / float(self._azumith_slices)
  #       rot_mat @= Matrix.Rotation(slice * float(self._azumith_slice), 4, 'Z')
  #     if self._zenith_slice > 0:
  #       slice = Utils.M_2PI / float(self._zenith_slices)
  #       rot_mat @= Matrix.Rotation(slice * float(self._zenith_slice), 4, 'X')
  #     cam.matrix_world = pmat * rot_mat

#     bpy.ops.object.mode_set(mode=self._oldMode)
#     if bpy.context.object != None:
#       self._oldMode = bpy.context.object.mode
#     else:
#       self._oldMode = None
#     bpy.ops.object.mode_set(mode='OBJECT')
#

#   def exportAction(self, ob, modelOut, actName):
#     # https://docs.blender.org/api/blender_python_api_2_62_release/bpy.types.AnimData.html
#     if ob.animation_data == None:
#       return
#
#     msg(ob.name + " has animation data " +
#         str(len(ob.animation_data.nla_tracks)) + " NLA Tracks")
#     sys.stdout.flush()
#     for nla in ob.animation_data.nla_tracks:
#       nla.select = True
#       msg("# NLA STrips: " + str(len(nla.strips)))
#       for strip in nla.strips:
#         curAction = strip.action
#         if curAction.name == actName:
#           msg("#Action Found : " + curAction.name)
#           # keyrames
#           keyframes = []
#
#           iMinKeyf = self.getMinKeyframeForAction(curAction)
#           iMaxKeyf = self.getMaxKeyframeForAction(curAction)
#
#           # dump keyframes to file.
#           if iMinKeyf < iMaxKeyf == 0:
#             msg("Animation had no keyframes.")
#           else:
#             self.renderKeyframeBlockForSelectedObject(
#               ob, iMinKeyf, iMaxKeyf, curAction, modelOut)
#
#   def renderKeyframeBlockForSelectedObject(self, ob, iMinKey, iMaxKey, curAction, modelOut):
#     # Create the directory for the action
#     actionOut = os.path.join(modelOut, os.path.normpath(curAction.name))
#     if not os.path.exists(actionOut):
#       os.makedirs(actionOut)
#
#     msg("exporting " + curAction.name + " to " + str(actionOut))
#
#     # if ob.type == 'ARMATURE':
#     self.renderKeyframeBlock(ob, iMinKey, iMaxKey, curAction, actionOut)
#     # elif ob.type == 'MESH':

#   def renderKeyframeBlock(self, ob, iMinKey, iMaxKey, curAction, actionOut):
#     ob.animation_data.action = curAction
#     iGrainKey = 0
#
#     msg("Writing keyframe block for ", str(iMinKey), " to ", str(iMaxKey))
#     sys.stdout.flush()
#     for iKeyFrame in range(iMinKey, iMaxKey + 1):
#       # this little block gets the final keyframe
#       iGrainMax = self._iSubframes
#       if iKeyFrame == iMaxKey:
#         iGrainMax = 1
#       for iGrain in range(0, iGrainMax):
#         fGrain = float(iGrain) / float(iGrainMax)
#         bpy.context.scene.frame_set(iKeyFrame, fGrain)
#         # context.scene.frame_set(scene.frame_end)
#         imgOut = os.path.join(actionOut, self.imgFrame(iGrainKey))
#         bpy.context.scene.render.filepath = imgOut
#         bpy.ops.render.render(write_still=True)
#
#         iGrainKey += 1


    # may be required

    #norm = bpy.context.scene.node_tree.nodes.new(type='CompositorNodeNormalize')
    #bpy.context.scene.node_tree.links.new(layers.outputs["Position"], norm.inputs[0])
    #print("vl="+str([x for x in bpy.context.scene.view_layers]))

    #bpy.context.scene.node_tree.links.new(norm.outputs[0], fileout.inputs[0])

    #print("fileout.inputs="+str([x for x in fileout.inputs]))
    #print(str([x for x in norm.inputs]))
    #print("normout="+str([x for x in norm.outputs]))

    # https://github.com/zhenpeiyang/HM3D-ABO/blob/master/my_blender_abo.py

    #fileout.file_slots[0].use_node_format = True
    #fileout.format.color_depth = args.color_depth

    #output = bpy.context.scene.node_tree.nodes.new(type='CompositorNodeOutputFile')

    # for out in layers.outputs:
    #  print("out=" + str(out))
    #       assert(type(node) is bpy.types.NodeSocketColor)
    #img = self.get_shader_node_image_input(node)
    # self.writeVec4(node.default_value)
    # if img != None:
    #   self.writeNodeID(self._image_ids[img])
    # else:
    #   self.writeNodeID(0)

    # print("layesr="+str(layers))

    # for node in bpy.context.scene.node_tree.nodes:
    #  print("node="+str(node))
        # open the library file as the scene, then we will import objects from other files
        #mainfile='/home/mario/git/Bake26D/main.blend'
    #self.blendFileExistsOrThrow(mainfile)
    #self.blendFileExistsOrThrow(blendFile)
       
    #append mesh & armatures from blend

    #individual meshes - it makes more sense to treat each file as one thing
    # so importing "scene" and disabling other scene. 
# 
#     with bpy.data.libraries.load(blendFile) as (data_from, data_to):
#       data_to.objects = data_from.objects
#     for ob in data_to.objects:
#       if (not ob.type == 'ARMATURE') and (not ob.type == 'MESH'):
#         msg("removing imported obj " + ob.name)
#         bpy.data.objects.remove(ob)
#         
#     self._objects = data_to.objects
    
    #if no actions export just frame0 (for like main sprites walls, etc)
    
    # this appends correctly but names get changed so how would we know which ones so we can unload
    #with bpy.data.libraries.load(blendFile) as (data_from, data_to):
    #  for name in data_from.objects:
    #      files.append({'name': name})
    #bpy.ops.wm.append(directory=blendFile+"/Object/", files=files)
    #msg("obs="+str([ob for ob in bpy.data.objects]))
    
    #TODO: you can remove with BlendData.objects.remove()
    # batch
    
    #    bpy.ops.wm.open_mainfile(filepath=blendFile)
    #    msg(bpy.data.filepath)
    #    msg(bpy.context.blend_data.filepath)
    #  else:

    #bpy.data.libraries.load("./Bake26DLibrary.blend")
    #data_to.materials = data_from.materials 
    # else:
      # backup
      # bpy.ops.wm.save_as_mainfile(filepath=bpy.data.filepath)
    
#     if not self._is_cmd:
#       bpy.ops.object.select_all(action='DESELECT')
#       if self._customCamera == False:
#         self._dummyCamera.select_set(True)
#       if self._customEmpty == False:
#         self._dummyEmpty.select_set(True)
# 
#       dbg_dont_delete = False
#       if not dbg_dont_delete:
#         bpy.ops.object.delete()
#       else:
#         dbg("debug: didnt delete dummy objects")
#       bpy.context.scene.camera = self._oldCamera
#       bpy.ops.object.select_all(action='DESELECT')
#       for ob in self._oldSelection:
#         ob.select_set(True)
#       bpy.context.view_layer.objects.active = self._oldActive  # None

    # restore render settings
    #   bpy.context.scene.cycles.aa_samples                 =  self._old_aa_samples
    # bpy.context.scene.render.film_transparent = self._old_film_transparent
    # bpy.context.scene.render.resolution_x = self._old_resolution_x
    # bpy.context.scene.render.resolution_y = self._old_resolution_y
    # bpy.context.scene.render.resolution_percentage = self._old_resolution_percentage
    # bpy.context.scene.render.filepath = self._old_render_filepath
    # # bpy.context.scene.render.engine = self._old_renderer
    # bpy.context.scene.render.image_settings.color_mode = self._old_color_mode
#   def selectArmature(self):
#     arm = None
#     # use selected armature, or find the first armature, report if more than one
#     arms = [ob for ob in self._oldSelection if ob != None and ob.type == 'ARMATURE']
#     # msg("arms=" + str(arms))
#     if len(arms) == 1:
#       arm = arms[0]
#     elif len(arms) > 0:
#       msg("More than 1 armature was selected")
#     else:
#       arms = [ob for ob in bpy.context.visible_objects if ob != None and ob.type == 'ARMATURE']
#       if len(arms) == 0:
#         throw("No armatures found. Can only do this with armature right now (later we can do other stuff)")
#       elif len(arms) > 0:
#         arm = arms[0]
#         if len(arms) > 1:
#           msg("More than 1 armature found, using first armature " + arm.name)
# 
#     return arm

  #compositor output slots
  #_colorOutput = None

      # for node in bpy.context.scene.node_tree.nodes:
    #  print("node="+str(node))
      # open the library file as the scene, then we will import objects from other files
      # mainfile='/home/mario/git/Bake26D/main.blend'
    # self.blendFileExistsOrThrow(mainfile)
    # self.blendFileExistsOrThrow(blendFile)

    # append mesh & armatures from blend

    # individual meshes - it makes more sense to treat each file as one thing
    # so importing "scene" and disabling other scene.
    #
    # https://docs.blender.org/api/current/bpy.types.Library.html


   # for ob in data_to.objects:
   #   if (not ob.type == 'ARMATURE') and (not ob.type == 'MESH'):
   #     msg("removing imported obj " + ob.name)
   #     bpy.data.objects.remove(ob)
    #
    #     self._objects = data_to.objects

    # if no actions export just frame0 (for like main sprites walls, etc)

    #bpy.ops.wm.append(directory=mainfilepath+"/Object/", files=files)

    # this appends correctly but names get changed so how would we know which ones so we can unload
    # with bpy.data.libraries.load(blendFile) as (data_from, data_to):
    #  for name in data_from.objects:
    #      files.append({'name': name})
    #bpy.ops.wm.append(directory=blendFile+"/Object/", files=files)
    #msg("obs="+str([ob for ob in bpy.data.objects]))

    # Utils.assertBlendFileExists(mainfile)
    # Utils.assertBlendFileExists(blendFile)
    # with bpy.data.libraries.load(self._libFile) as (data_from, data_to):
    #  #xx = print(builtins.dir(data_from))
    #  data_to.node_groups = data_from.node_groups
    #  #for ng in data_from.node_groups:
    #    #print(str(ng))
    #  #data_to.objects = data_from.objects
    # for ng in data_to.node_groups:
    #  print(str(ng.name))
    #  if ng.name == 'EdgeDeblur':
    #    bpy.data.node_groups.nodes.append(ng)
        # TODO: we should select the NLA track when we do this.
    #min_start = 99999
    #max_end = -99999
    #ob_actions = []

    # for nla in ob.animation_data.nla_tracks:
    #   if not "[Action Stash]" in nla.name:
    #     if len(nla.strips) > 0:
    #       act = nla.strips[0].action
    #       ob_actions.append(act)
    #       min_start = min(act.frame_range[0], min_start)
    #       max_end = max(act.frame_range[1], max_end)

#   def sweepBounds(self, ob, min_start, max_end, ob_actions):
#     # get sweep bb of all anims
#     bdic = self.sweepBoundsAll(ob, min_start, max_end, ob_actions)
# 
#     sweep = BoundBox.zero()
#     sweep.genReset()
#     for k in bdic:
#       sweep.genExpandByBox(bdic[k])
#     return sweep
# 
#   def sweepBoundsAll(self, ob, min_start, max_end, ob_actions):
#     # return dictionary of sweep bounds for all action [name->BoundBox]
#     bbdict = {}
#     for act in ob_actions:
#       bbdict[act.name] = BoundBox.zero()
#       bbdict[act.name].genReset()
# 
#     frame = min_start
#     while frame <= max_end:
#       Utils.set_frame(frame)
#       frame += self._data._sampleRate
#       for act in ob_actions:
#         ob.animation_data.action = act
#         bpy.context.view_layer.update()
#         bbdict[act.name].genExpandByBox(BoundBox.fromBlender(ob.bound_box))
# 
#     return bbdict

  # def animateFrameRange(self, min_start, max_end, lamb):
  #   frame = min_start
  #   while frame <= max_end:
  #     Utils.set_frame(frame)
  #     lamb(frame)
  #     frame += self._data._sampleRate
    # 
    # frame = inf._min_start
    # while frame <= inf._max_end:
    #   Utils.set_frame(frame)
    #   frame += self._data._sampleRate
    #   for act in inf._actions:
    #     ob.animation_data.action = act._action
    #     bpy.context.view_layer.update()
    #     bb = BoundBox.fromBlender(ob.bound_box)
    #     inf._actions[act.name]._sweepBox.genExpandByBox(bb)
    #     inf._sweepBox.genExpandByBox(bb)

      
#     #color_master = Image.new(mode="RGBA", size= (self._size, self._size), color=(0,0,0,0))
#     depth_master = Image.new(mode="RGBA", size= (self._size, self._size), color=(0,0,0,0))
#     self.copyImages(self._root, depth_master, 1)
#     
#     
# 
#     path = os.path.join(outpath, "mt_depth_normal.png")
#     msg("saving "+ path)
#     depth_master.update()
#     depth_master.save()

    # PIL     
    # color_master = Image.new(mode="RGBA", size= (self._size, self._size), color=(0,0,0,0))
    # self.copyImages(self._root, color_master, 0)
    # depth_master = Image.new(mode="RGBA", size= (self._size, self._size), color=(0,0,0,0))
    # self.copyImages(self._root, depth_master, 1)
    # 
    # path = os.path.join(outpath, "mt_color.png")
    # msg("saving "+ path)
    # color_master.save(path)
    # path = os.path.join(outpath, "mt_depth_normal.png")
    # msg("saving "+ path)
    # depth_master.save()
        
    # #https://docs.blender.org/api/current/bpy.ops.image.html
    # with bpy.data.images.new('gen-'+name, self._size, self._size) as master_img:
    #   master_img.alpha_mode = 'STRAIGHT'
    #   master_img.depth = '8'
    #   master_img.file_format = 'PNG'
    #   self.copyImages(self._root, master_img, layer)
    #   path = os.path.join(outpath, name+".png")
    #   msg("saving "+ path)
    #   master_img.update()
    #   bpy.ops.image.save_as(filepath=path)
    #   #master_img.save(path)
    #   



    //   {
    //     "label": "ALL_BUILD_DEBUG",
    //     "dependsOn": [
    //       "CMAKE_BUILD_DEBUG",
    //       "DOTNET_BUILD_DEBUG"
    //     ],
    //     "problemMatcher": [],
    //     "presentation": {
    //       "echo": true,
    //       "reveal": "always",
    //       "focus": false,
    //       "panel": "shared",
    //       "showReuseMessage": false,
    //       "clear": true,
    //       "close": false
    //     },
    //     "group": {
    //       "kind": "build",
    //     },
    //   },
    //   {
    //     "label": "ALL_BUILD_RELEASE",
    //     "dependsOn": [
    //       "CMAKE_BUILD_RELEASE",
    //       "DOTNET_BUILD_RELEASE"
    //     ],
    //     "problemMatcher": [],
    //     "presentation": {
    //       "echo": true,
    //       "reveal": "always",
    //       "focus": false,
    //       "panel": "shared",
    //       "showReuseMessage": false,
    //       "clear": true,
    //       "close": false
    //     },
    //     "group": {
    //       "kind": "build",
    //       "isDefault": true
    //     },
    //   },
    //   {
    //     "label": "ALL_CLEAN",
    //     "type": "shell",
    //     "command": "echo cleaning ${workspaceFolder}/; rm -rf ${workspaceFolder}/bin; rm -rf ${workspaceFolder}/obj; rm -rf ${workspaceFolder}/tmp; rm -rf ${workspaceFolder}/build",
    //     "problemMatcher": [],
    //     "presentation": {
    //       "echo": true,
    //       "reveal": "always",
    //       "focus": false,
    //       "panel": "shared",
    //       "showReuseMessage": false,
    //       "clear": false,
    //       "close": false
    //     }
    //   },


    // 
// class MonoUtils {
// public:
//   static std::string compile_dll_default() {
//     msg("Compiling DLL");
//     msg("cwd=" + getcwd(NULL, 0));
//     std::string dllname = "./bin/Debug/Test.dll";
//     std::string cmd = "mcs -t:library -fullpaths";
//     cmd = cmd + " -nologo -debug+ -debug:full -unsafe+ -optimize-";
//     // not avail in mcs
//     //-parallel+
//     //-nullable+
//     // cmd = cmd + " -nosdkpath";
//     // cmd = cmd + " -nostdlib+";
//     // cmd = cmd + " -embed";
//     cmd = cmd + " -out:" + dllname;
//     // cmd = cmd + " ./src/Test.cs";
//     cmd = cmd + " ../Loft/src/*.cs";
//     cmd = cmd + " /lib:" + "\"" + "/usr/lib/mono/4.8-api/Facades/" + "\"";
//     cmd = cmd + " /lib:" + "\"" + "/usr/lib/mono/4.8-api/" + "\"";
//     cmd = cmd + " /lib:" + "\"" + "../Loft/bin/Debug/net6.0/" + "\"";
// 
//     // cmd = cmd + " /r:" + "\"" + "mscorlib.dll" + "\"";
// 
//     cmd = cmd + " /r:" + "\"" + "System.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Runtime.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Collections.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Collections.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Linq.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Console.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Threading.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "System.Threading.ThreadPool.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "OpenTK.Windowing.GraphicsLibraryFramework.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "OpenTK.Windowing.Desktop.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "OpenTK.Windowing.Common.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "OpenTK.Graphics.dll" + "\"";
//     cmd = cmd + " /r:" + "\"" + "OpenTK.Core.dll" + "\"";
//     //  cmd = cmd + " /r:" + "\"" + "Loft.dll" + "\"";
//     //
//     // Path.Combine(Gu.ExePath, "Loft.dll"),
//     msg("cmd=" + cmd);
//     auto out = Gu::executeReadOutput(cmd);
//     msg("Mono Compile Output: " + out);
//     if (out.find("error") != std::string::npos) {
//       msg("compile error. See output. Press Enter to Continue.");
//       Gu::debugBreak();
//     }
//     return dllname;
//   }
// 
//   static void init_mono(int argc, char** argv) {
//     // std::string dllname = compile_dll_default();
//     //  msg("cwd=" + getcwd(NULL, 0));
// 
//     std::string dllname = "/home/mario/git/Loft/bin/Debug/net6.0/Loft.dll";  // building with csc
// 
//     // issue is assembly references between mono and the Loft compiled in csc
//     // getting lolft to compile in mcs seems also difficult as the files dont have hte correct api references as well
// 
//     // std::string cmd = "xbuild /p:Configuration=Debug ../Loft/Loft.csproj";
//     // auto out = Gu::executeReadOutput(cmd);
//     // msg("Mono Compile Output: " + out);
//     // if (out.find("error") != std::string::npos) {
//     //   msg("compile error. See output. Press Enter to Continue.");
//     //   Gu::debugBreak();
//     // }
// 
//     msg("Parsing config");
//     mono_config_parse(NULL);
//     
//     LogInfo("configdir = " + mono_get_config_dir());
//     ///home/mario/.vscode/extensions/ms-dotnettools.csharp-1.25.4-linux-x64/.razor/
//     mono_set_dirs("/home/mario/.vscode/extensions/ms-dotnettools.csharp-1.25.4-linux-x64/.razor/","/etc/mono/config");
//     LogInfo("configdir = " + mono_get_config_dir());
//     // domain = mono_jit_init_version ("myapp", "v4.0.30319");
//     MonoDomain* domain = mono_jit_init("main-domain");//, "v6.0"); //
// 
//     void* user_data = NULL;
//     mono_runtime_exec_managed_code(domain, main_thread_handler, user_data);
// 
//     // msg("cwd=" + getcwd(NULL, 0));
//     // msg("  Creating new domain, current heap used size: " + std::to_string(mono_gc_get_used_size()));
//     // MonoDomain* temp_domain = mono_domain_create_appdomain((char*)"temp_domain", NULL);
//     // if (!mono_domain_set(temp_domain, 0)) {
//     //   throw Exception("  Failed to set the domain");
//     // }
//     msg("Loading assembly " + dllname);
//     MonoAssembly* assembly = mono_domain_assembly_open(domain, dllname.c_str()); //mono_domain_get()
//     if (!assembly) {
//       throw Exception(" Assembly not found.");
//     }
//     auto retval = mono_jit_exec(domain, assembly, argc, argv);
// 
//     // find method
//     //  Assemblies contain images. I'm not sure why you pass the filename if the assembly needs to be loaded anyway..?
//     //  MonoMethod* method = find_static_method(dllname, "Loft", "MainClass", "Loft.MainClass:StartEngine_NoArgs()");
//     //  MonoObject* exception = nullptr;
//     //  MonoObject* result = mono_runtime_invoke(method, NULL, NULL, &exception);
//     //  if (exception != nullptr) {
//     //    mono_unhandled_exception (exception); //prints execption
//     //   // throw Exception(" MyGame dll -> exception thrown: ??");  // How to get exception information from a MonoObject ?
//     //  }
//     // mono_free_method(method);
// 
//     mono_jit_cleanup(domain);
// 
//     mono_gc_collect(mono_gc_max_generation());
//   }
// 
//   static MonoClass* get_class(const std::string& image_name, const std::string& namespace_name,
//                               const std::string& class_name) {
//     MonoImageOpenStatus status;
//     MonoImage* mygame_image = mono_image_open(image_name.c_str(), &status);
//     if (mygame_image == nullptr) {
//       throw Exception("MyGame dll not found.");
//     }
//     MonoClass* className = mono_class_from_name(mygame_image, namespace_name.c_str(), class_name.c_str());
//     mono_image_close(mygame_image);  // This appears to b
//     return className;
//   }
//   static MonoMethod* find_static_method(const std::string& image_name, const std::string& namespace_name,
//                                         const std::string& class_name, const std::string& methodname) {
//     // MonoImageOpenStatus status;
//     // MonoImage* mygame_image = mono_image_open(image_name.c_str(), &status);
//     // if (mygame_image == nullptr) {
//     //   errorExit("MyGame dll not found.");
//     // }
//     // MonoClass* className = mono_class_from_name(mygame_image, namespace_name.c_str(), class_name.c_str());
//     // mono_image_close(mygame_image);  //This appears to be alright.
// 
//     MonoClass* className = get_class(image_name, namespace_name, class_name);
// 
//     std::string details = std::string() + " (image=" + image_name + " namespace=" + namespace_name + " class=" + class_name + ")";
//     if (className == nullptr) {
//       throw Exception(std::string() + "Could not get class" + details);
//     }
// 
//     //[namespace.]classname:methodname[(args...)]
// 
//     MonoMethodDesc* desc;
//     desc = mono_method_desc_new(methodname.c_str(), true);
//     if (desc == nullptr) {
//       throw Exception(std::string() + "Could not get method descriptor " + details);
//     }
//     MonoMethod* return_method = mono_method_desc_search_in_class(desc, className);
//     mono_method_desc_free(desc);
//     if (return_method == nullptr) {
//       throw Exception("cound not locate Method: " + methodname);
//     }
//     msg("method found: " + mono_method_full_name(return_method, true));
// 
//     return return_method;
//   }
// };

// void Window::initEngine() {
// //   glEnable(GL_DEPTH_TEST);
// //   glEnable(GL_SCISSOR_TEST);
// //   glDisable(GL_CULL_FACE);
// //   glFrontFace(GL_CCW);
// //   glEnable(GL_BLEND);
// //   glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
// //   glEnable(GL_DEBUG_OUTPUT);
// //   glEnable(GL_DEBUG_OUTPUT_SYNCHRONOUS);
// //   glClearColor(0.89, 0.91, 0.91, 1.0);
// //   CheckErrorsDbg();
// //
// //   auto testpath = Gu::relpath("../data/tex/stpeter.jpg");
// //   _testTex = std::make_unique<Texture>(Image::from_file(testpath.string()).get(), true);
// //
// //   _drawQuads = std::make_unique<DrawQuads>();
// //   _drawQuads->testMakeQuads();
// //   _drawQuads->copyToGpu();
// //   _objShader = std::make_unique<Shader>(Gu::assetpath("shader/b26obj.vs.glsl"), Gu::assetpath("/shader/b26obj.gs.glsl"), Gu::assetpath("/shader/b26obj.fs.glsl"));
// //
// //
// //
// //   // going away
// //   float d = 4;
// //   GpuObj ob;
// //   ob._mat = mat4(1.0);
// //   ob._mat = glm::scale(ob._mat, vec3(3, 3, 3));
// //   ob._mat = glm::translate(ob._mat, vec3(-d * 3, 1, 0));
// //   ob._tex = vec4(0, 0, 1, 1);  // looks like this is upside down could be a data transfer issue.
// //   ob._texid = 0;
// //   _objs.push_back(ob);
// //   ob._mat = mat4(1.0);
// //   ob._mat = glm::scale(ob._mat, vec3(3, 3, 3));
// //   ob._mat = glm::translate(ob._mat, vec3(-d * 2, 1, 0));
// //   ob._tex = vec4(0, 0, 1, 1);
// //   ob._texid = 1;
// //   _objs.push_back(ob);
// //   ob._mat = mat4(1.0);
// //   ob._mat = glm::scale(ob._mat, vec3(3, 3, 3));
// //   ob._mat = glm::translate(ob._mat, vec3(-d * 1, 1, 0));
// //   ob._tex = vec4(0, 0, 1, 1);
// //   ob._texid = 2;
// //   _objs.push_back(ob);
// //   ob._mat = mat4(1.0);
// //   ob._mat = glm::scale(ob._mat, vec3(3, 3, 3));
// //   ob._mat = glm::translate(ob._mat, vec3(-d * 0, 1, 0));
// //   ob._tex = vec4(0, 0, 1, 1);
// //   ob._texid = 3;
// //   _objs.push_back(ob);
// //
// //   _objBuf = std::make_unique<GpuBuffer>(sizeof(GpuObj) * _objs.size(), _objs.data());
// //   _objVao = std::make_unique<VertexArray>();
//
//
// }
  // Gu.Context.GameWindow.Context.SwapBuffers();
  // Gu.Context.Gpu.ExecuteCallbacks_RenderThread();
  //   }
  //   else {
  //     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  //
  //     // TODO: views + cameras.
  //
  //     auto cam = Gu::world()->activeCamera();
  //
  //     cam->updateViewport(_width, _height);  //_proj shouldbe on the window
  //
  //     // draw quads test
  //     _drawQuads->draw(cam.get(), _testTex.get());
  //
  //     // this is going away we're going to 'collect bobjs'
  //     //  objs test
  //     _objShader->bind();
  //     _objShader->setCameraUfs(cam.get());
  //     _objShader->setTextureUf(Gu::world()->objtexs(), 0, "_textures");
  //     _objShader->bindSSBBlock("_ufGpuObj_Block", _objBuf.get());
  //     _objVao->bind();
  //     glDrawArrays(GL_POINTS, 0, _objs.size());
  //     _objVao->unbind();
  //     _objShader->unbind();
  //   }



#   def buildB2Obj(region: MtRegion, region_fname: str, obj_dict: dict):
#     sep = Bake26.spritePathSeparator()
#     grp = '([^'+sep+']+)'
#     # parse name
#     rxstr = Bake26.c_OBNM
#     rxstr += sep + grp  # ob 0
#     rxstr += sep + grp  # act 1
#     rxstr += sep + grp  # a 2
#     rxstr += sep + grp  # z 3
#     rxstr += sep + grp  # ifr 4
#     rxstr += sep + grp  # ffr 5
#     rxstr += sep + '(.+)'  # ext 6
#     # msg("fname="+region_fname)
#     # msg("rxstr="+rxstr)
#     fname = os.path.basename(region_fname)
#     rx = re.search(rxstr, fname)
#
#     if (not rx) or (len(rx.groups()) != 7):
#       raise Exception("Invalid file format group count ="+str(len(rx.groups())))
#
#     obname = rx.groups()[0]
#     actname = rx.groups()[1]
#     ifr = rx.groups()[4]
#     ffr = rx.groups()[5]
#
#     if not obname in obj_dict:
#       obj = b2_obj()
#       obj._id = b2_obj._ob_idgen
#       b2_obj._ob_idgen += 1
#       obj._name = obname
#       obj_dict[obname] = obj
#     obj = obj_dict[obname]
#     if not actname in obj._actions:
#       act = b2_action()
#       act._id = len(obj._actions)+1
#       act._name = actname
#       obj._actions[actname] = act
#     act = obj._actions[actname]
#     fr = b2_frame()
#     fr._texid = region._texid
#     fr._x = region._node._rect.left()
#     fr._y = region._node._rect.top()
#     fr._w = region._node._rect.width()
#     fr._h = region._node._rect.height()
#     seq_str = ifr+"."+ffr
#     assert(not seq_str in act._frames)
#     seq = float(seq_str)  # "0004.200"
#     fr._seq = seq
#     act._frames[seq_str] = fr          
#   def gatherTextures(fpath: str, texs: dict, skipdir: bool):  # , color_extension: str, layers: dict
#     fpath = os.path.abspath(fpath)
#     fds = os.listdir(fpath)  # get all files' and folders' names in the current directory
#     color_extension = Bake26.getOutput(ExportLayer.Color).layer_ext()
# 
#     for item in fds:
# 
#       file_path = os.path.join(fpath, item)
# 
#       if os.path.isfile(file_path):
#         if skipdir == False:
# 
#           layer_ext = LayerOutput.parse_extension(item)
# 
#           if layer_ext != None:
#             if layer_ext == color_extension:
#               w, h = Utils.get_image_size(file_path)
#               assert(w > 0)
#               assert(h > 0)
#               texs[file_path] = MtRegion()
#               texs[file_path]._pathColor = file_path
#               texs[file_path]._width = int(w)
#               texs[file_path]._height = int(h)
#               texs[file_path]._texid = -1
#               texs[file_path]._node = None
#               texs[file_path]._layers = {}
# 
#               for output in Bake26.c_layers:
#                 out_layer_ext = output.layer_ext()
#                 layer_path = file_path.replace(layer_ext, out_layer_ext)
#                 texs[file_path]._layers[output._layer] = layer_path
# 
#       elif os.path.isdir(file_path):
#         if item != '.' and not Bake26.c_backupDirName in item:
#           Bake26.gatherTextures(file_path, texs, False)

  //auto metapathjson = b2data_root / "B2MT.json";

  // Json::Value data_json;
  // std::fstream metafile(metapathjson);  //, std::ifstream::binary
  // metafile >> data_json;


  // template < typename Tx >
  // std::unique_ptr<Tx> fromJson<Tx>(const str &t){
  //   std::unique_ptr<Tx> t;
  // }
  // #define Jint(__t,__y) __t __y; 
  // #define Jarr(__t,__y) __t __y; 
  // #define Jstr(__t,__y) __t __y; 
  //only support string float int array(vector)

  // LogInfo("empty(" + mt.empty());
  // LogInfo("size()" + mt.size());
  // LogInfo("toStyledString()" + mt.toStyledString());
  // int maj = data_json["_major"].asInt();
  // int mino = data_json["_minor"].asInt();
  // // data_json["_texs"].asInt();
  // // data_json["_objs"].asInt();
  // for (Json::Value::iterator it = data_json["_texs"].begin(); it != data_json["_texs"].end(); ++it) {
  //   int tid = (*it)["_texid"].asInt();
  //   int w = (*it)["_w"].asInt();
  //   int h = (*it)["_h"].asInt();
  //   auto jv = (*it)["_images"].isArray();
  //   auto jv2 = (*it)["_images"].isObject();
  //   auto jvv = (*it)["_images"].size();
  //   for (Json::ArrayIndex i=0; i<(*it)["_images"].size(); i++) {
  //     auto sttt = (*it)["_images"][i].asString();
  //     int n = 0;
  //   }
  //   // "_texid": 1,
  //   // "_w": 2048,
  //   // "_h": 2048,
  //   // "_images": [
  //   //   "B2MT.001.Color.png"
  //   // ]
  // }
  // metafile.close();


  //   auto mmm = mt.getMemberNames();
  //
  //   msg(mmm.size());
  //   for (std::string m : mmm) {
  //     std::cout<<m<<std::endl;
  //   }
  //   for(auto& xx : mt){
  //     auto tp = xx.type();
  //
  //     msg(xx.asString());
  //   }

  // LogInfo("getMemberNames()"+mt.getMemberNames());
